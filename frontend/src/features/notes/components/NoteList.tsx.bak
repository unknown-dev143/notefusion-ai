import React, { useState, useCallback, useMemo } from 'react';
import { List, Button, Input, Typography, Empty, Tag, Spin, Space, Card } from 'antd';
import { 
  StarOutlined, 
  StarFilled, 
  DeleteOutlined, 
  PlusOutlined, 
  SearchOutlined,
  EditOutlined
} from '@ant-design/icons';
import type { Note } from '../types/note';
import { ExportImportButtons } from '../../exportImport';
import { formatDistanceToNow } from 'date-fns';

const { Text } = Typography;

interface NoteListProps {
  notes: Note[];
  selectedNoteId?: string | null;
  onSelectNote: (note: Note | null) => void;
  onCreateNew: () => void;
  onDeleteNote: (noteId: string) => void;
  onTogglePin: (noteId: string) => void;
  onSetReminder?: (noteId: string) => void;
  loading?: boolean;
  userId: string;
}

const NoteList: React.FC<NoteListProps> = ({
  notes,
  selectedNoteId,
  onSelectNote,
  onCreateNew,
  onDeleteNote,
  onTogglePin,
  onSetReminder,
  loading = false,
  userId,
}) => {
  const [searchTerm, setSearchTerm] = useState('');

  // Sort and filter notes based on search term
  const filteredNotes = useMemo(() => {
    const filtered = [...notes].filter(note => 
      note.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (note.content || '').toLowerCase().includes(searchTerm.toLowerCase()) ||
      (note.tags && note.tags.some(tag => 
        tag.toLowerCase().includes(searchTerm.toLowerCase())
      ))
    );
    
    // Sort by pinned status and last updated
    return filtered.sort((a, b) => {
      if (a.isPinned && !b.isPinned) return -1;
      if (!a.isPinned && b.isPinned) return 1;
      return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();
    });
  }, [notes, searchTerm]);

  // Handle note selection
  const handleNoteClick = useCallback((note: Note) => {
    onSelectNote(note);
  }, [onSelectNote]);

  // Handle create new note
  const handleCreateNewClick = useCallback(() => {
    onCreateNew();
  }, [onCreateNew]);

  // Render each note item
  const renderNoteItem = useCallback((note: Note) => (
    <List.Item
      key={note.id}
      onClick={() => handleNoteClick(note)}
      style={{
        cursor: 'pointer',
        padding: '12px 16px',
        backgroundColor: selectedNoteId === note.id ? '#f0f7ff' : 'transparent',
        borderLeft: selectedNoteId === note.id ? '3px solid #1890ff' : '3px solid transparent',
        transition: 'all 0.3s',
      }}
    >
      <div style={{ width: '100%' }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>
          <Text strong style={{ fontSize: 15 }} ellipsis={{ tooltip: note.title }}>
            {note.title || 'Untitled Note'}
          </Text>
          <Space>
            <Button
              type="text"
              size="small"
              icon={note.isPinned ? <StarFilled style={{ color: '#faad14' }} /> : <StarOutlined />}
              onClick={(e) => {
                e.stopPropagation();
                onTogglePin(note.id);
              }}
              title={note.isPinned ? 'Unpin note' : 'Pin note'}
            />
            <Button
              type="text"
              size="small"
              icon={<DeleteOutlined />}
              onClick={(e) => {
                e.stopPropagation();
                onDeleteNote(note.id);
              }}
              title="Delete note"
              danger
            />
          </Space>
        </div>
        
        <Text 
          type="secondary" 
          ellipsis={{ rows: 2 }} 
          style={{ 
            fontSize: 13, 
            marginBottom: 8,
            lineHeight: '1.4',
            display: 'block',
            minHeight: 36
          }}
        >
          {note.content.replace(/<[^>]*>?/gm, '')}
        </Text>
        
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <div>
            {note.tags && note.tags.length > 0 && (
              <div style={{ display: 'flex', flexWrap: 'wrap', gap: 4 }}>
                {note.tags.slice(0, 2).map((tag) => (
                  <Tag 
                    key={tag} 
                    color="blue" 
                    style={{ 
                      margin: 0,
                      fontSize: 11,
                      padding: '0 6px',
                      borderRadius: 2
                    }}
                  >
                    {tag}
                  </Tag>
                ))}
                {note.tags.length > 2 && (
                  <Tag style={{ fontSize: 11, padding: '0 6px', borderRadius: 2 }}>
                    +{note.tags.length - 2}
                  </Tag>
                )}
              </div>
            )}
          </div>
          
          <Text type="secondary" style={{ fontSize: 11, whiteSpace: 'nowrap', marginLeft: 8 }}>
            {formatDistanceToNow(new Date(note.updatedAt), { addSuffix: true })}
          </Text>
        </div>
      </div>
    </List.Item>
  ), [handleNoteClick, onDeleteNote, onTogglePin, selectedNoteId]);

  // Render empty state
  const renderEmpty = () => (
    <div style={{ textAlign: 'center', padding: '40px 16px' }}>
      <Empty
        image={Empty.PRESENTED_IMAGE_SIMPLE}
        description={
          <span>No notes found</span>
        }
      >
        <Button 
          type="primary" 
          onClick={handleCreateNewClick}
          icon={<PlusOutlined />}
        >
          Create Note
        </Button>
      </Empty>
    </div>
  );

  if (loading) {
    return (
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        height: '100%',
        minHeight: '300px'
      }}>
        <Spin size="large" />
      </div>
    );
  }

  return (
    <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
      <Card 
        size="small" 
        style={{ marginBottom: 16, borderRadius: 8, boxShadow: '0 1px 2px rgba(0,0,0,0.05)' }}
        bodyStyle={{ padding: '12px 16px' }}
      >
        <div style={{ display: 'flex', gap: 8, marginBottom: 12 }}>
          <Input
            placeholder="Search notes..."
            prefix={<SearchOutlined />}
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            allowClear
            style={{ flex: 1 }}
          />
          <Button 
            type="primary" 
            icon={<PlusOutlined />} 
            onClick={handleCreateNewClick}
          >
            New
          </Button>
        </div>
        <ExportImportButtons 
          selectedNotes={selectedNoteId ? notes.filter(n => n.id === selectedNoteId) : []}
          buttonSize="small"
          userId={userId}
        />
      </Card>
      
      <div style={{ flex: 1, overflow: 'auto', paddingRight: 4 }}>
        <List<Note>
          dataSource={filteredNotes}
          renderItem={renderNoteItem}
          locale={{ emptyText: renderEmpty() }}
          style={{ padding: '0 8px' }}
          rowKey="id"
        />
      </div>
    </div>
  );
};

export default NoteList;
