{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nclass LectureService {\n  constructor() {\n    this.currentLecture = null;\n    this.lectureTimeout = null;\n    this.LECTURE_TIMEOUT_MS = 10 * 60 * 1000;\n    // 10 minutes of inactivity\n    this.MIN_CONTENT_LENGTH = 20;\n    // Minimum chars to consider as valid note\n    // Callback for when a new lecture is detected\n    this.onNewLecture = null;\n    // Callback for when a lecture is marked as complete\n    this.onLectureComplete = null;\n  }\n  processNewContent(content, videoTitle) {\n    if (!content || content.length < this.MIN_CONTENT_LENGTH) {\n      return null;\n    }\n    const now = new Date();\n\n    // Check if this is a new lecture\n    if (!this.currentLecture || this.isNewLecture(content, now)) {\n      const prevLecture = this.currentLecture;\n\n      // Mark previous lecture as complete if exists\n      if (prevLecture) {\n        this.markLectureComplete(prevLecture);\n      }\n\n      // Create new lecture\n      this.currentLecture = {\n        id: uuidv4(),\n        title: videoTitle || `Lecture ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`,\n        content,\n        timestamp: now,\n        lectureNumber: this.getNextLectureNumber(),\n        isComplete: false\n      };\n\n      // Notify about new lecture\n      if (this.onNewLecture) {\n        this.onNewLecture(this.currentLecture);\n      }\n    } else {\n      // Add to existing lecture\n      if (this.currentLecture) {\n        this.currentLecture.content += `\\n\\n${content}`;\n        this.currentLecture.timestamp = now;\n      }\n    }\n\n    // Reset the inactivity timer\n    this.resetInactivityTimer();\n    return this.currentLecture;\n  }\n  markCurrentLectureComplete() {\n    if (this.currentLecture && !this.currentLecture.isComplete) {\n      this.markLectureComplete(this.currentLecture);\n      this.currentLecture = null;\n    }\n  }\n  markLectureComplete(lecture) {\n    if (lecture.isComplete) return;\n    lecture.isComplete = true;\n    if (this.onLectureComplete) {\n      this.onLectureComplete(lecture);\n    }\n  }\n  isNewLecture(content, currentTime) {\n    if (!this.currentLecture) return true;\n    const timeSinceLastUpdate = currentTime.getTime() - this.currentLecture.timestamp.getTime();\n\n    // Consider it a new lecture if:\n    // 1. More than 30 minutes since last update\n    // 2. Content starts with a number (possible lecture number)\n    // 3. Content contains lecture-related keywords\n    const hasLectureNumber = /^\\s*lecture\\s+\\d+/i.test(content) || /^\\s*\\d+\\s*[.:]/.test(content);\n    const hasLectureKeywords = /lecture|class|chapter|unit|part/i.test(content);\n    return timeSinceLastUpdate > 30 * 60 * 1000 || hasLectureNumber || hasLectureKeywords;\n  }\n  resetInactivityTimer() {\n    if (this.lectureTimeout) {\n      clearTimeout(this.lectureTimeout);\n    }\n    this.lectureTimeout = setTimeout(() => {\n      if (this.currentLecture) {\n        this.markCurrentLectureComplete();\n      }\n    }, this.LECTURE_TIMEOUT_MS);\n  }\n  getNextLectureNumber() {\n    // In a real app, this would fetch from your database\n    // For now, we'll use a simple counter\n    return 1; // You'll want to implement proper lecture number tracking\n  }\n}\nexport const lectureService = new LectureService();","map":{"version":3,"names":["v4","uuidv4","LectureService","constructor","currentLecture","lectureTimeout","LECTURE_TIMEOUT_MS","MIN_CONTENT_LENGTH","onNewLecture","onLectureComplete","processNewContent","content","videoTitle","length","now","Date","isNewLecture","prevLecture","markLectureComplete","id","title","toLocaleDateString","toLocaleTimeString","timestamp","lectureNumber","getNextLectureNumber","isComplete","resetInactivityTimer","markCurrentLectureComplete","lecture","currentTime","timeSinceLastUpdate","getTime","hasLectureNumber","test","hasLectureKeywords","clearTimeout","setTimeout","lectureService"],"sources":["C:/Users/User/notefusion-ai/notefusion-ai/frontend/src/services/lectureService.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nexport interface LectureNote {\n  id: string;\n  title: string;\n  content: string;\n  timestamp: Date;\n  lectureNumber?: number;\n  isComplete: boolean;\n  videoId?: string;\n}\n\nclass LectureService {\n  private currentLecture: LectureNote | null = null;\n  private lectureTimeout: NodeJS.Timeout | null = null;\n  private readonly LECTURE_TIMEOUT_MS = 10 * 60 * 1000; // 10 minutes of inactivity\n  private readonly MIN_CONTENT_LENGTH = 20; // Minimum chars to consider as valid note\n\n  // Callback for when a new lecture is detected\n  public onNewLecture: ((lecture: LectureNote) => void) | null = null;\n  \n  // Callback for when a lecture is marked as complete\n  public onLectureComplete: ((lecture: LectureNote) => void) | null = null;\n\n  public processNewContent(content: string, videoTitle?: string): LectureNote | null {\n    if (!content || content.length < this.MIN_CONTENT_LENGTH) {\n      return null;\n    }\n\n    const now = new Date();\n    \n    // Check if this is a new lecture\n    if (!this.currentLecture || this.isNewLecture(content, now)) {\n      const prevLecture = this.currentLecture;\n      \n      // Mark previous lecture as complete if exists\n      if (prevLecture) {\n        this.markLectureComplete(prevLecture);\n      }\n\n      // Create new lecture\n      this.currentLecture = {\n        id: uuidv4(),\n        title: videoTitle || `Lecture ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`,\n        content,\n        timestamp: now,\n        lectureNumber: this.getNextLectureNumber(),\n        isComplete: false,\n      };\n\n      // Notify about new lecture\n      if (this.onNewLecture) {\n        this.onNewLecture(this.currentLecture);\n      }\n    } else {\n      // Add to existing lecture\n      if (this.currentLecture) {\n        this.currentLecture.content += `\\n\\n${content}`;\n        this.currentLecture.timestamp = now;\n      }\n    }\n\n    // Reset the inactivity timer\n    this.resetInactivityTimer();\n    \n    return this.currentLecture;\n  }\n\n  public markCurrentLectureComplete(): void {\n    if (this.currentLecture && !this.currentLecture.isComplete) {\n      this.markLectureComplete(this.currentLecture);\n      this.currentLecture = null;\n    }\n  }\n\n  private markLectureComplete(lecture: LectureNote): void {\n    if (lecture.isComplete) return;\n    \n    lecture.isComplete = true;\n    if (this.onLectureComplete) {\n      this.onLectureComplete(lecture);\n    }\n  }\n\n  private isNewLecture(content: string, currentTime: Date): boolean {\n    if (!this.currentLecture) return true;\n    \n    const timeSinceLastUpdate = currentTime.getTime() - this.currentLecture.timestamp.getTime();\n    \n    // Consider it a new lecture if:\n    // 1. More than 30 minutes since last update\n    // 2. Content starts with a number (possible lecture number)\n    // 3. Content contains lecture-related keywords\n    const hasLectureNumber = /^\\s*lecture\\s+\\d+/i.test(content) || /^\\s*\\d+\\s*[.:]/.test(content);\n    const hasLectureKeywords = /lecture|class|chapter|unit|part/i.test(content);\n    \n    return timeSinceLastUpdate > 30 * 60 * 1000 || hasLectureNumber || hasLectureKeywords;\n  }\n\n  private resetInactivityTimer(): void {\n    if (this.lectureTimeout) {\n      clearTimeout(this.lectureTimeout);\n    }\n\n    this.lectureTimeout = setTimeout(() => {\n      if (this.currentLecture) {\n        this.markCurrentLectureComplete();\n      }\n    }, this.LECTURE_TIMEOUT_MS);\n  }\n\n  private getNextLectureNumber(): number {\n    // In a real app, this would fetch from your database\n    // For now, we'll use a simple counter\n    return 1; // You'll want to implement proper lecture number tracking\n  }\n}\n\nexport const lectureService = new LectureService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}