{"ast":null,"code":"import axios from 'axios';\nimport { getAuth } from 'firebase/auth';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  // Add auth token to request headers\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  return response.data;\n}, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // If unauthorized and not already retried\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // Try to refresh the token\n      const auth = getAuth();\n      const user = auth.currentUser;\n      if (user) {\n        const newToken = await user.getIdToken(true);\n        localStorage.setItem('token', newToken);\n\n        // Retry the original request with new token\n        originalRequest.headers.Authorization = `Bearer ${newToken}`;\n        return api(originalRequest);\n      }\n    } catch (refreshError) {\n      console.error('Token refresh failed:', refreshError);\n      // Redirect to login or handle token refresh failure\n      window.location.href = '/login';\n    }\n  }\n  console.error('API Error:', error);\n  return Promise.reject(error);\n});\n\n// Flashcards\nconst getFlashcards = async sessionId => {\n  const response = await api.get(`/api/flashcards/${sessionId}`);\n  return response;\n};\n\n// Quiz\nconst getQuiz = async sessionId => {\n  const response = await api.get(`/api/quiz/${sessionId}`);\n  return response;\n};\nexport const apiService = {\n  getFlashcards,\n  getQuiz,\n  // Async video job: submit, poll, download\n  submitVideoJob: async payload => {\n    // POST to submit job, returns {job_id, status}\n    const response = await api.post('/api/video/job', payload);\n    return response;\n  },\n  getVideoJobStatus: async jobId => {\n    // GET job status/result\n    const response = await api.get(`/api/video/job/${jobId}`);\n    return response;\n  },\n  downloadVideoJobResult: async jobId => {\n    // GET video file\n    const response = await api.get(`/api/video/job/${jobId}/download`, {\n      responseType: 'blob'\n    });\n    return response;\n  },\n  // File upload and processing\n  uploadFile: async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await api.post('/api/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response;\n  },\n  transcribeAudio: async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await api.post('/api/transcribe', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response;\n  },\n  // Content fusion\n  fuseContent: async data => {\n    const formData = new FormData();\n    formData.append('lecture_content', data.lecture_content);\n    formData.append('textbook_content', data.textbook_content);\n    formData.append('module_code', data.module_code);\n    formData.append('chapters', data.chapters);\n    formData.append('detail_level', data.detail_level);\n    if (data.session_id) {\n      formData.append('session_id', data.session_id);\n    }\n    const response = await api.post('/api/fuse', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response;\n  },\n  // Sessions\n  getSessions: async () => {\n    const response = await api.get('/api/sessions');\n    return response.data;\n  },\n  getSession: async sessionId => {\n    return api.get(`/sessions/${sessionId}`);\n  },\n  createSession: async data => {\n    return api.post('/sessions', data);\n  },\n  // Search\n  searchContent: async (query, sessionId = null) => {\n    const params = {\n      query\n    };\n    if (sessionId) {\n      params.session_id = sessionId;\n    }\n    const response = await api.get('/api/search', {\n      params\n    });\n    return response;\n  },\n  // Export\n  exportMarkdown: async sessionId => {\n    const formData = new FormData();\n    formData.append('session_id', sessionId);\n    const response = await api.post('/api/export/markdown', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      responseType: 'blob'\n    });\n    return response;\n  },\n  exportPDF: async sessionId => {\n    const formData = new FormData();\n    formData.append('session_id', sessionId);\n    const response = await api.post('/api/export/pdf', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      responseType: 'blob'\n    });\n    return response;\n  },\n  exportFlashcards: async sessionId => {\n    const formData = new FormData();\n    formData.append('session_id', sessionId);\n    const response = await api.post('/api/export/flashcards', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      responseType: 'blob'\n    });\n    return response;\n  },\n  // Diagrams\n  saveDiagram: async (sessionId, diagramData, diagramType = 'freehand') => {\n    const formData = new FormData();\n    formData.append('session_id', sessionId);\n    formData.append('diagram_data', diagramData);\n    formData.append('diagram_type', diagramType);\n    const response = await api.post('/api/diagrams/save', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response;\n  },\n  getDiagrams: async sessionId => {\n    const response = await api.get(`/api/diagrams/${sessionId}`);\n    return response;\n  },\n  // Notes versions\n  saveNotesVersion: async (sessionId, notesContent, versionNumber) => {\n    const formData = new FormData();\n    formData.append('session_id', sessionId);\n    formData.append('notes_content', notesContent);\n    formData.append('version_number', versionNumber);\n    const response = await api.post('/api/notes/version', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response;\n  },\n  getNotesVersions: async sessionId => {\n    const response = await api.get(`/api/notes/versions/${sessionId}`);\n    return response;\n  },\n  // WebSocket connection for live recording\n  createWebSocket: sessionId => {\n    const wsUrl = API_BASE_URL.replace('http', 'ws');\n    return new WebSocket(`${wsUrl}/ws/recording`);\n  },\n  // Health check\n  healthCheck: async () => {\n    const response = await api.get('/');\n    return response;\n  }\n};\n\n// Utility functions\nexport const downloadFile = (blob, filename) => {\n  const url = window.URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  window.URL.revokeObjectURL(url);\n};\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\nexport const formatDuration = seconds => {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor(seconds % 3600 / 60);\n  const remainingSeconds = seconds % 60;\n  if (hours > 0) {\n    return `${hours}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  } else {\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  }\n};","map":{"version":3,"names":["axios","getAuth","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","data","_error$response","originalRequest","status","_retry","auth","user","currentUser","newToken","getIdToken","setItem","refreshError","console","window","location","href","getFlashcards","sessionId","get","getQuiz","apiService","submitVideoJob","payload","post","getVideoJobStatus","jobId","downloadVideoJobResult","responseType","uploadFile","file","formData","FormData","append","transcribeAudio","fuseContent","lecture_content","textbook_content","module_code","chapters","detail_level","session_id","getSessions","getSession","createSession","searchContent","query","params","exportMarkdown","exportPDF","exportFlashcards","saveDiagram","diagramData","diagramType","getDiagrams","saveNotesVersion","notesContent","versionNumber","getNotesVersions","createWebSocket","wsUrl","replace","WebSocket","healthCheck","downloadFile","blob","filename","url","URL","createObjectURL","link","document","createElement","download","body","appendChild","click","removeChild","revokeObjectURL","formatFileSize","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","formatDuration","seconds","hours","minutes","remainingSeconds","toString","padStart"],"sources":["C:/Users/User/notefusion-ai/notefusion-ai/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\nimport { getAuth } from 'firebase/auth';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor\napi.interceptors.request.use(\n  (config) => {\n    // Add auth token to request headers\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => {\n    return response.data;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n    \n    // If unauthorized and not already retried\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      \n      try {\n        // Try to refresh the token\n        const auth = getAuth();\n        const user = auth.currentUser;\n        \n        if (user) {\n          const newToken = await user.getIdToken(true);\n          localStorage.setItem('token', newToken);\n          \n          // Retry the original request with new token\n          originalRequest.headers.Authorization = `Bearer ${newToken}`;\n          return api(originalRequest);\n        }\n      } catch (refreshError) {\n        console.error('Token refresh failed:', refreshError);\n        // Redirect to login or handle token refresh failure\n        window.location.href = '/login';\n      }\n    }\n    \n    console.error('API Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Flashcards\nconst getFlashcards = async (sessionId) => {\n  const response = await api.get(`/api/flashcards/${sessionId}`);\n  return response;\n};\n\n// Quiz\nconst getQuiz = async (sessionId) => {\n  const response = await api.get(`/api/quiz/${sessionId}`);\n  return response;\n};\n\nexport const apiService = {\n  getFlashcards,\n  getQuiz,\n  // Async video job: submit, poll, download\n  submitVideoJob: async (payload) => {\n    // POST to submit job, returns {job_id, status}\n    const response = await api.post('/api/video/job', payload);\n    return response;\n  },\n  getVideoJobStatus: async (jobId) => {\n    // GET job status/result\n    const response = await api.get(`/api/video/job/${jobId}`);\n    return response;\n  },\n  downloadVideoJobResult: async (jobId) => {\n    // GET video file\n    const response = await api.get(`/api/video/job/${jobId}/download`, { responseType: 'blob' });\n    return response;\n  },\n  // File upload and processing\n  uploadFile: async (file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const response = await api.post('/api/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response;\n  },\n\n  transcribeAudio: async (file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const response = await api.post('/api/transcribe', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response;\n  },\n\n  // Content fusion\n  fuseContent: async (data) => {\n    const formData = new FormData();\n    formData.append('lecture_content', data.lecture_content);\n    formData.append('textbook_content', data.textbook_content);\n    formData.append('module_code', data.module_code);\n    formData.append('chapters', data.chapters);\n    formData.append('detail_level', data.detail_level);\n    if (data.session_id) {\n      formData.append('session_id', data.session_id);\n    }\n    \n    const response = await api.post('/api/fuse', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response;\n  },\n\n  // Sessions\n  getSessions: async () => {\n    const response = await api.get('/api/sessions');\n    return response.data;\n  },\n\n  getSession: async (sessionId) => {\n    return api.get(`/sessions/${sessionId}`);\n  },\n\n  createSession: async (data) => {\n    return api.post('/sessions', data);\n  },\n\n  // Search\n  searchContent: async (query, sessionId = null) => {\n    const params = { query };\n    if (sessionId) {\n      params.session_id = sessionId;\n    }\n    const response = await api.get('/api/search', { params });\n    return response;\n  },\n\n  // Export\n  exportMarkdown: async (sessionId) => {\n    const formData = new FormData();\n    formData.append('session_id', sessionId);\n    \n    const response = await api.post('/api/export/markdown', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      responseType: 'blob',\n    });\n    return response;\n  },\n\n  exportPDF: async (sessionId) => {\n    const formData = new FormData();\n    formData.append('session_id', sessionId);\n    \n    const response = await api.post('/api/export/pdf', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      responseType: 'blob',\n    });\n    return response;\n  },\n\n  exportFlashcards: async (sessionId) => {\n    const formData = new FormData();\n    formData.append('session_id', sessionId);\n    \n    const response = await api.post('/api/export/flashcards', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      responseType: 'blob',\n    });\n    return response;\n  },\n\n  // Diagrams\n  saveDiagram: async (sessionId, diagramData, diagramType = 'freehand') => {\n    const formData = new FormData();\n    formData.append('session_id', sessionId);\n    formData.append('diagram_data', diagramData);\n    formData.append('diagram_type', diagramType);\n    \n    const response = await api.post('/api/diagrams/save', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response;\n  },\n\n  getDiagrams: async (sessionId) => {\n    const response = await api.get(`/api/diagrams/${sessionId}`);\n    return response;\n  },\n\n  // Notes versions\n  saveNotesVersion: async (sessionId, notesContent, versionNumber) => {\n    const formData = new FormData();\n    formData.append('session_id', sessionId);\n    formData.append('notes_content', notesContent);\n    formData.append('version_number', versionNumber);\n    \n    const response = await api.post('/api/notes/version', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response;\n  },\n\n  getNotesVersions: async (sessionId) => {\n    const response = await api.get(`/api/notes/versions/${sessionId}`);\n    return response;\n  },\n\n  // WebSocket connection for live recording\n  createWebSocket: (sessionId) => {\n    const wsUrl = API_BASE_URL.replace('http', 'ws');\n    return new WebSocket(`${wsUrl}/ws/recording`);\n  },\n\n  // Health check\n  healthCheck: async () => {\n    const response = await api.get('/');\n    return response;\n  },\n};\n\n// Utility functions\nexport const downloadFile = (blob, filename) => {\n  const url = window.URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  window.URL.revokeObjectURL(url);\n};\n\nexport const formatFileSize = (bytes) => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\nexport const formatDuration = (seconds) => {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const remainingSeconds = seconds % 60;\n  \n  if (hours > 0) {\n    return `${hours}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  } else {\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}