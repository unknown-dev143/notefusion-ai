import asyncio
import os
from pathlib import Path
from datetime import datetime

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from app.config import settings
from app.models.database import Base
from app.schemas.video import VideoGenerationRequest, VideoStyle, VideoVoice
from app.services.video.service import VideoGenerationService

# Setup test database
TEST_DB_URL = "sqlite:///./test_notefusion.db"
engine = create_engine(TEST_DB_URL, connect_args={"check_same_thread": False})
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Create test database tables
def setup_test_db():
    Base.metadata.create_all(bind=engine)
    return TestingSessionLocal()

async def test_video_generation():
    print("Setting up test database...")
    db = setup_test_db()
    
    # Create test directories
    os.makedirs("app/videos", exist_ok=True)
    os.makedirs("app/temp", exist_ok=True)
    
    # Create test request
    request = VideoGenerationRequest(
        title="Test Video",
        description="This is a test video generation",
        script="""
        # Welcome to NoteFusion AI
        
        This is a test video generated by NoteFusion AI.
        
        ## Features:
        - AI-powered video generation
        - Multiple styles and voices
        - Customizable duration
        
        Thank you for testing!
        """,
        style=VideoStyle.EDUCATIONAL,
        voice=VideoVoice.NEUTRAL,
        duration_per_slide=5,
        include_captions=True
    )
    
    # Initialize service
    service = VideoGenerationService(db)
    
    print("Starting video generation...")
    
    # Start video generation
    response = await service.generate_video(request, "test_user_123")
    print(f"Started task: {response}")
    
    # Simulate background processing (in a real app, this would be handled by Celery)
    service._process_video_generation(response["task_id"], request, "test_user_123")
    
    # Check status
    status = service.get_video_status(response["task_id"], "test_user_123")
    print(f"Final status: {status}")
    
    # Clean up
    db.close()
    
    if status.get("status") == "completed":
        print("\nüéâ Video generation test completed successfully!")
        print(f"Video path: {status.get('video_url')}")
    else:
        print("\n‚ùå Video generation test failed!")
        print(f"Error: {status.get('error')}")

if __name__ == "__main__":
    asyncio.run(test_video_generation())
