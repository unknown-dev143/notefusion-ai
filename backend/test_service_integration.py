"""
Integration test for the Video Generation Service.
This script tests the end-to-end video generation workflow.
"""
import os
import sys
import tempfile
from pathlib import Path
from unittest.mock import MagicMock, patch

# Add the backend directory to Python path
backend_dir = Path(__file__).parent.absolute()
sys.path.insert(0, str(backend_dir))

# Mock database session
class MockDB:
    def commit(self):
        pass
    
    def rollback(self):
        pass

def test_video_generation():
    """Test the video generation workflow."""
    print("\nTesting Video Generation Service")
    print("=" * 50)
    
    # Mock database session
    db = MockDB()
    
    # Import the service after setting up the path
    from app.services.video.service import VideoGenerationService
    from app.schemas.video import VideoGenerationRequest, VideoStyle
    
    # Initialize the service
    service = VideoGenerationService(db)
    
    # Create a test request
    request = VideoGenerationRequest(
        script="""# Test Video
        
        This is a test video generated by NoteFusion AI.
        
        It demonstrates the video generation capabilities.""",
        style=VideoStyle.PROFESSIONAL,
        include_narration=False,
        duration_per_slide=3
    )
    
    # Mock the FFmpeg service
    with patch('app.services.video.service.FFmpegVideoService') as mock_ffmpeg:
        # Configure the mock
        mock_instance = mock_ffmpeg.return_value
        mock_instance.generate_video.return_value = Path("test_output/test_video.mp4")
        
        # Test video generation
        print("Starting video generation...")
        result = service.generate_video(request, "test_user")
        
        # Verify the result
        assert "task_id" in result
        assert result["status"] == "pending"
        
        print("✅ Video generation started successfully")
        print(f"Task ID: {result['task_id']}")
        
        # Test getting task status
        print("\nTesting task status retrieval...")
        with patch('app.services.video.service.get_task') as mock_get_task:
            # Mock the task object
            mock_task = MagicMock()
            mock_task.id = result["task_id"]
            mock_task.status = "completed"
            mock_task.result_data = {
                "progress": 100,
                "status": "Video generation completed",
                "result": {
                    "video_path": "test_output/test_video.mp4",
                    "video_url": "/api/videos/123/download"
                }
            }
            mock_get_task.return_value = mock_task
            
            status = service.get_video_status(result["task_id"], "test_user")
            assert status["status"] == "completed"
            assert status["progress"] == 100
            
            print("✅ Task status retrieval successful")
            print(f"Status: {status}")

if __name__ == "__main__":
    test_video_generation()
